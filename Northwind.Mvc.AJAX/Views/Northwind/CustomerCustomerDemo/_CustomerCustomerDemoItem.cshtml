@model CustomerCustomerDemoItemModel

@{
    string customerDemographicText = Model.CustomerCustomerDemo == null ? "" : (Model.CustomerCustomerDemo.CustomerDemographicLookupText ?? "");
    string customerText = Model.CustomerCustomerDemo == null ? "" : (Model.CustomerCustomerDemo.CustomerLookupText ?? "");
}

@Html.ValidationSummary(false, "", new { @class = "text-danger" })

@Html.HiddenFor(model => model.ControllerAction)
@Html.HiddenFor(model => model.IsMasterDetail)
@Html.HiddenFor(model => model.MasterCustomerTypeId)
@Html.HiddenFor(model => model.MasterCustomerId)

@{Html.EJ().Tab("Tab_CustomerCustomerDemo")
    .ClientSideEvents(clientEvent => clientEvent
        .ItemActive("itemActive_Tab_CustomerCustomerDemo")
    )
    .Items(data =>
    {
        data.Add().ID("TabSheet_CustomerCustomerDemo_CustomerCustomerDemo").Text(CustomerCustomerDemoResources.EntitySingular).ContentTemplate(@<div class="panel-body">        
            
            <div id="Group_CustomerCustomerDemo_CustomerId" class="@AppDefaults.CssClassGroup col-md-6">
                @Html.Label(@CustomerResources.EntitySingular, new { @class = AppDefaults.CssClassLabelRequired })
                @Html.EditorFor(model => model.CustomerCustomerDemo.CustomerId, new { id = "CustomerCustomerDemo_CustomerId", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })                    
                @Html.Action("Lookup", "Customer", new
                {
                    Text = customerText,
                    ValueId = "CustomerCustomerDemo_CustomerId"
                })
                @Html.ValidationMessageFor(model => model.CustomerCustomerDemo.CustomerId, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_CustomerCustomerDemo_CustomerTypeId" class="@AppDefaults.CssClassGroup col-md-6">
                @Html.Label(@CustomerDemographicResources.EntitySingular, new { @class = AppDefaults.CssClassLabelRequired })
                @Html.EditorFor(model => model.CustomerCustomerDemo.CustomerTypeId, new { id = "CustomerCustomerDemo_CustomerTypeId", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })                    
                @Html.Action("Lookup", "CustomerDemographic", new
                {
                    Text = customerDemographicText,
                    ValueId = "CustomerCustomerDemo_CustomerTypeId"
                })
                @Html.ValidationMessageFor(model => model.CustomerCustomerDemo.CustomerTypeId, "", new { @class = AppDefaults.CssClassValidator })
            </div>

        </div>);
    })
    .Render();
}

<script>
    // Validate hidden fields
    $.validator.setDefaults({ ignore: null });
    // Parse validators
    $.validator.unobtrusive.parse($("#Ajax"));

    $(function () {
        try {
            var model = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)); }();
            var customerCustomerDemoDictionary = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(DataHelper.GetDataDictionaryAttribute(typeof(CustomerCustomerDemo)))); }();
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();
            
            var ajaxUrl = "";
            ej.widget.init($("#Ajax"));
            $(document).prop("title", "@(ViewBag.Title)");            
    
            var readonly = (controllerAction == "delete" || controllerAction == "read");
            $("input.form-control").not(":input[type=button], :input[type=image], :input[type=reset], :input[type=submit]").attr("readonly", readonly);
            if (readonly) {
                $("img.z-buttonLookup").hide();
            }
            else {
                $("img.z-buttonLookup").show();
            }

            $("input[name$='_Lookup']").attr("readonly", true);

            if (customerCustomerDemoDictionary.IsIdentity) {            
                $("#Group_CustomerCustomerDemo_CustomerId").hide();
                $("#Group_CustomerCustomerDemo_CustomerTypeId").hide();
            }

            // Associations (FK)
            // CustomerDemographic
            if (model.MasterCustomerTypeId != null) {
                $("#CustomerCustomerDemo_CustomerTypeId").val(model.MasterCustomerTypeId);
                $("#Group_CustomerCustomerDemo_CustomerTypeId").hide();            
            }
            // Customer
            if (model.MasterCustomerId != null) {
                $("#CustomerCustomerDemo_CustomerId").val(model.MasterCustomerId);
                $("#Group_CustomerCustomerDemo_CustomerId").hide();            
            }

            // Collections (PK)
            var display = controllerAction == "create" ? "none" : "block";
        } catch (exception) {
            alert(zExceptionMessage("_CustomerCustomerDemoItem.cshtml", "function()", exception));
        }
    });

    function itemActive_Tab_CustomerCustomerDemo(args) { // IE
        try {
        } catch (exception) {
            alert(zExceptionMessage("_CustomerCustomerDemoItem.cshtml", "itemActive_Tab_CustomerCustomerDemo(args)", exception));
        }
    }    
</script>
