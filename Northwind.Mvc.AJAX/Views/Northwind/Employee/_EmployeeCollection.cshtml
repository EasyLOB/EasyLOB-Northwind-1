@model EmployeeCollectionModel

@{
    ViewBag.Title = EmployeeResources.EntityPlural;
    
    string query = "";
    if (Model.MasterReportsTo != null)
    {
        query = String.Format("ej.Query().where(\"ReportsTo\", ej.FilterOperators.equal, {0})", Model.MasterReportsTo);
    }
}

<div id="Collection_Employee_Title">
    <h3>@ViewBag.Title</h3>
</div>

<div id="Collection_Employee">
    @(Html.EJ().Grid<Employee>("Grid_Employee")
        .Datasource(datasource => datasource
            .Adaptor(AdaptorType.UrlAdaptor)
            .URL(Url.Content("~/Employee/DataSource"))
        )
        .Query(query)
        .AllowFiltering()
        .AllowGrouping()
        .AllowPaging()
        .AllowResizing()
        .AllowScrolling()
        .AllowSearching()
        .AllowSorting()
        .ClientSideEvents(clientEvent => clientEvent
            .ActionBegin("actionBegin_Grid_Employee")
            .ActionFailure("actionFailure_Grid_Employee")
            .Load("load_Grid_Employee")
            .ToolbarClick("toolbarClick_Grid_Employee")
        )
        .Columns(column =>
        {
            column.Field("EmployeeId")
                .AllowEditing(false)
                .EditType(EditingType.Numeric)
                .Format(SyncfusionPatternResources.GridFormat_Integer)
                .HeaderText(EmployeeResources.PropertyEmployeeId)
                .IsIdentity(true)
                .IsPrimaryKey(true)
                .TextAlign(TextAlign.Right)
                .Visible(false)
                .Width(100)
                .Add();
            column.Field("LastName")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyLastName)
                .Visible(true)
                .Width(200)
                .Add();
            column.Field("FirstName")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyFirstName)
                .Visible(true)
                .Width(100)
                .Add();
            column.Field("Title")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyTitle)
                .Visible(false)
                .Width(240)
                .Add();
            column.Field("TitleOfCourtesy")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyTitleOfCourtesy)
                .Visible(false)
                .Width(240)
                .Add();
            column.Field("BirthDate")
                .EditType(EditingType.DateTimePicker)
                .Format(SyncfusionPatternResources.GridFormat_DateTime)
                .HeaderText(EmployeeResources.PropertyBirthDate)
                .Visible(false)
                .Width(100)
                .Add();
            column.Field("HireDate")
                .EditType(EditingType.DateTimePicker)
                .Format(SyncfusionPatternResources.GridFormat_DateTime)
                .HeaderText(EmployeeResources.PropertyHireDate)
                .Visible(false)
                .Width(100)
                .Add();
            column.Field("Address")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyAddress)
                .Visible(false)
                .Width(240)
                .Add();
            column.Field("City")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyCity)
                .Visible(false)
                .Width(150)
                .Add();
            column.Field("Region")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyRegion)
                .Visible(false)
                .Width(150)
                .Add();
            column.Field("PostalCode")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyPostalCode)
                .Visible(false)
                .Width(100)
                .Add();
            column.Field("Country")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyCountry)
                .Visible(false)
                .Width(150)
                .Add();
            column.Field("HomePhone")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyHomePhone)
                .Visible(false)
                .Width(240)
                .Add();
            column.Field("Extension")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyExtension)
                .Visible(false)
                .Width(40)
                .Add();
            column.Field("Photo")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyPhoto)
                .Visible(false)
                .Width(100)
                .Add();
            column.Field("Notes")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyNotes)
                .Visible(false)
                .Width(160)
                .Add();
            column.Field("ReportsTo")
                .EditType(EditingType.Numeric)
                .Format(SyncfusionPatternResources.GridFormat_Integer)
                .HeaderText(EmployeeResources.PropertyReportsTo)
                .TextAlign(TextAlign.Right)
                .Visible(false)
                .Width(100)
                .Add();
            column.Field("EmployeeLookupText")
                .AllowEditing(false)
                .HeaderText(EmployeeResources.EntitySingular)
                .Visible(true)
                .Width(100)
                .Add();
            column.Field("PhotoPath")
                .EditType(EditingType.String)
                .HeaderText(EmployeeResources.PropertyPhotoPath)
                .Visible(false)
                .Width(240)
                .Add();
        })
        .EditSettings(edit => edit
            .AllowAdding()
            .AllowDeleting()
            .AllowEditing()
        )
        //.EnablePersistence()
        .FilterSettings(filter => filter
            .EnableCaseSensitivity(false)
            .FilterType(FilterType.Excel)
            .MaxFilterChoices(System.Int32.MaxValue)
        )
        .Mappers(map => map
            .ExportToExcelAction(Url.Content("~/Employee/ExportToExcel"))
            .ExportToPdfAction(Url.Content("~/Employee/ExportToPdf"))
            .ExportToWordAction(Url.Content("~/Employee/ExportToWord"))
        )
        .PageSettings(page => page
            .PageSize(AppDefaults.SyncfusionRecordsByPage)
        )
        .SearchSettings(search =>
        {
            search.Fields(field =>
            {
                //field.Add("EmployeeId");
                field.Add("LastName");
                field.Add("FirstName");
                //field.Add("Title");
                //field.Add("TitleOfCourtesy");
                //field.Add("BirthDate");
                //field.Add("HireDate");
                //field.Add("Address");
                //field.Add("City");
                //field.Add("Region");
                //field.Add("PostalCode");
                //field.Add("Country");
                //field.Add("HomePhone");
                //field.Add("Extension");
                //field.Add("Photo");
                //field.Add("Notes");
                //field.Add("ReportsTo");
                field.Add("EmployeeLookupText");
                //field.Add("PhotoPath");
            });
        })
        .ShowColumnChooser()
        .ToolbarSettings(toolbar => toolbar
            .CustomToolbarItems(new List<object>() {
                new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Toolbar_Grid_Employee" }
            })
            .ShowToolbar()
            .ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Search);
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
                items.AddTool(ToolBarItems.Delete);
                items.AddTool(ToolBarItems.ExcelExport);
                items.AddTool(ToolBarItems.PdfExport);
                items.AddTool(ToolBarItems.WordExport);
            })
        )
    )
</div>

@Html.OperationResult(Model.OperationResult)

<script type="text/x-jsrender" id="Toolbar_Grid_Employee">
    <div id="Toolbar_Grid_Employee_Read" class="e-toolbaricons e-icon e-document" title="@PresentationResources.Read"></div>
</script>

<script>
    $(function () {
        try {
            var model = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)); }();
    
            var title = $("#Collection_Employee_Title");
            
            ej.widget.init($("#Collection_Employee"));

            if (model.IsSecurityOperations.IsSearch) {
                $("#Collection_Employee").css("display", "block");
            }
            else {
                $("#Collection_Employee").css("display", "none");
            }

            var gridEmployee = $("#Grid_Employee");
            var ejGridEmployee = gridEmployee.data("ejGrid");
                
            if (!model.IsMasterDetail) {
                title.css("display", "block");
                $(document).prop("title", "@Html.Raw(AppHelper.DocumentTitle(ViewBag.Title))");
                
                ejGridEmployee.setModel({
                    allowGrouping: true,
                    toolbarSettings: {
                        toolbarItems: [
                            ej.Grid.ToolBarItems.Search,
                            ej.Grid.ToolBarItems.Add,
                            ej.Grid.ToolBarItems.Edit,
                            ej.Grid.ToolBarItems.Delete,
                            ej.Grid.ToolBarItems.ExcelExport,
                            ej.Grid.ToolBarItems.PdfExport,
                            ej.Grid.ToolBarItems.WordExport
                        ]                    
                    }
                });
            } else {
                title.css("display", "none");
    
                ejGridEmployee.setModel({
                    allowGrouping: false,
                    toolbarSettings: {
                        toolbarItems: [
                            ej.Grid.ToolBarItems.Add,
                            ej.Grid.ToolBarItems.Edit,
                            ej.Grid.ToolBarItems.Delete
                        ]                    
                    }
                });
            }
        } catch (exception) {
            alert(zExceptionMessage("_EmployeeCollection.cshtml", "function", exception));
        }                
    });
    
    function actionBegin_Grid_Employee(args) {
        try {
            var model = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)); }();
            var masterControllerAction = model.MasterControllerAction == null ? "" : model.MasterControllerAction.toLowerCase();
    
            // Associations (FK)
            var url = "";
            // Employee
            if (model.MasterReportsTo != null) {
                url = url + (url == "" ? "" : "&") + "MasterReportsTo=" + String(model.MasterReportsTo);
            }

            if (masterControllerAction == "" || masterControllerAction == "update") {
                switch(args.requestType) {
                    case "add":
                        // Create
                        if (model.IsSecurityOperations.IsCreate) {
                            $("#Ajax").load("@(Url.Action("Create", "Employee", null, Request.Url.Scheme))" +
                                (url == "" ? "" : "?") + url);
                        }
                        break;
                    case "read":
                        // Read
                        if (model.IsSecurityOperations.IsRead) {
                            var data = args.data;
                            if (!ej.isNullOrUndefined(data)) {
                                $("#Ajax").load("@(Url.Action("Read", "Employee", null, Request.Url.Scheme))?EmployeeId=" + String(data.EmployeeId) +
                                    (url == "" ? "" : "&") + url);
                            }
                        }
                        break;                        
                    case "beginedit":
                        // Update
                        if (model.IsSecurityOperations.IsUpdate) {
                            var data = this.model.currentViewData[args.rowIndex];
                            if (!ej.isNullOrUndefined(data)) {
                                $("#Ajax").load("@(Url.Action("Update", "Employee", null, Request.Url.Scheme))?EmployeeId=" + String(data.EmployeeId) +
                                    (url == "" ? "" : "&") + url);
                            }
                        }
                        break;
                    case "delete":
                        // Delete
                        if (model.IsSecurityOperations.IsDelete) {
                            var data = args.data;
                            if (!ej.isNullOrUndefined(data)) {
                                $("#Ajax").load("@(Url.Action("Delete", "Employee", null, Request.Url.Scheme))?EmployeeId=" + String(data.EmployeeId) +
                                    (url == "" ? "" : "&") + url);
                            }
                        }
                        break;
                }
            }

            if (args.requestType == "add" || args.requestType == "beginedit" || args.requestType == "delete") {
                args.cancel = true;
            }
        } catch (exception) {
            alert(zExceptionMessage("_EmployeeCollection.cshtml", "actionBegin_Grid_Employee", exception));
        }            
    }
    
    function actionFailure_Grid_Employee(args) {
        try {
            alert(zErrorMessage(args.error.responseText));
        } catch (exception) {
            alert(zExceptionMessage("_EmployeeCollection.cshtml", "actionFailure_Grid_Employee", exception));
        }
    }    

    function load_Grid_Employee(args) {
        try {            
            var culture = "@System.Globalization.CultureInfo.CurrentCulture.Name";
            this.model.locale = culture;
        } catch (exception) {
            alert(zExceptionMessage("_EmployeeCollection.cshtml", "load_Grid_Employee", exception));
        }
    }

    function toolbarClick_Grid_Employee(sender) {
        try {
            var toolbar = $(sender.target);
            var gridEmployee = $("#Grid_Employee");
            var ejGridEmployee = gridEmployee.data("ejGrid");

            if (toolbar.attr("id") == "Toolbar_Grid_Employee_Read") {
                var records = ejGridEmployee.getSelectedRecords();
                if (records.length == 1) {
                    var args = { requestType: "read", data: records[0] };
                    actionBegin_Grid_Employee(args)
                }
            }
        } catch (exception) {
            alert(zExceptionMessage("_EmployeeCollection.cshtml", "toolbarClick_Grid_Employee", exception));
        }
    }
</script>
