@model EmployeeItemModel

@{
    string employeeText = Model.Employee == null ? "" : (Model.Employee.EmployeeLookupText ?? "");
    string employee_Photo_Base64 = Convert.ToBase64String(new byte[] {});
    if (Model.Employee != null && Model.Employee.Photo != null)
    {
        employee_Photo_Base64 = Convert.ToBase64String(Model.Employee.Photo);
    }
    string employee_Photo_Source = string.Format("data:image/jpg;base64,{0}", employee_Photo_Base64);        
}

@Html.ValidationSummary(false, "", new { @class = "text-danger" })

@Html.HiddenFor(model => model.ControllerAction)
@Html.HiddenFor(model => model.IsMasterDetail)
@Html.HiddenFor(model => model.MasterReportsTo)

@{Html.EJ().Tab("Tab_Employee")
    .ClientSideEvents(clientEvent => clientEvent
        .ItemActive("itemActive_Tab_Employee")
    )
    .Items(data =>
    {
        data.Add().ID("TabSheet_Employee_Employee").Text(EmployeeResources.EntitySingular).ContentTemplate(@<div class="panel-body">        
            
            <div id="Group_Employee_EmployeeId" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.EmployeeId, new { @class = AppDefaults.CssClassLabelRequired })
                @Html.EditorFor(model => model.Employee.EmployeeId, new { id = "Employee_EmployeeId", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.EmployeeId, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_LastName" class="@AppDefaults.CssClassGroup col-md-3">
                @Html.LabelFor(model => model.Employee.LastName, new { @class = AppDefaults.CssClassLabelRequired })
                @Html.EditorFor(model => model.Employee.LastName, new { id = "Employee_LastName", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.LastName, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_FirstName" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.FirstName, new { @class = AppDefaults.CssClassLabelRequired })
                @Html.EditorFor(model => model.Employee.FirstName, new { id = "Employee_FirstName", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.FirstName, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_Title" class="@AppDefaults.CssClassGroup col-md-4">
                @Html.LabelFor(model => model.Employee.Title, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.Title, new { id = "Employee_Title", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.Title, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_TitleOfCourtesy" class="@AppDefaults.CssClassGroup col-md-3">
                @Html.LabelFor(model => model.Employee.TitleOfCourtesy, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.TitleOfCourtesy, new { id = "Employee_TitleOfCourtesy", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.TitleOfCourtesy, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_BirthDate" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.BirthDate, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.BirthDate, new { id = "Employee_BirthDate", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.BirthDate, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_HireDate" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.HireDate, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.HireDate, new { id = "Employee_HireDate", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.HireDate, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_Address" class="@AppDefaults.CssClassGroup col-md-6">
                @Html.LabelFor(model => model.Employee.Address, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.Address, new { id = "Employee_Address", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.Address, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_City" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.City, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.City, new { id = "Employee_City", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.City, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_Region" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.Region, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.Region, new { id = "Employee_Region", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.Region, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_PostalCode" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.PostalCode, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.PostalCode, new { id = "Employee_PostalCode", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.PostalCode, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_Country" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.Country, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.Country, new { id = "Employee_Country", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.Country, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_HomePhone" class="@AppDefaults.CssClassGroup col-md-3">
                @Html.LabelFor(model => model.Employee.HomePhone, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.HomePhone, new { id = "Employee_HomePhone", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.HomePhone, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_Extension" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.LabelFor(model => model.Employee.Extension, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.Extension, new { id = "Employee_Extension", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.Extension, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_Photo" class="@AppDefaults.CssClassGroup col-md-2">
                @Html.Label(@EmployeeResources.PropertyPhoto, new { @class = AppDefaults.CssClassLabel })
                <img src="@employee_Photo_Source" class="z-image" />
                @Html.ValidationMessageFor(model => model.Employee.Photo, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_Notes" class="@AppDefaults.CssClassGroup col-md-3">
                @Html.LabelFor(model => model.Employee.Notes, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.Notes, new { id = "Employee_Notes", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.Notes, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_ReportsTo" class="@AppDefaults.CssClassGroup col-md-6">
                @Html.Label(@EmployeeResources.EntitySingular, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.ReportsTo, new { id = "Employee_ReportsTo", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })                    
                @Html.Action("Lookup", "Employee", new
                {
                    Text = employeeText,
                    ValueId = "Employee_ReportsTo"
                })
                @Html.ValidationMessageFor(model => model.Employee.ReportsTo, "", new { @class = AppDefaults.CssClassValidator })
            </div>
            
            <div id="Group_Employee_PhotoPath" class="@AppDefaults.CssClassGroup col-md-6">
                @Html.LabelFor(model => model.Employee.PhotoPath, new { @class = AppDefaults.CssClassLabel })
                @Html.EditorFor(model => model.Employee.PhotoPath, new { id = "Employee_PhotoPath", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
                @Html.ValidationMessageFor(model => model.Employee.PhotoPath, "", new { @class = AppDefaults.CssClassValidator })
            </div>

        </div>);
        data.Add().ID("TabSheet_Employee_Employee").Text(EmployeeResources.EntityPlural).ContentTemplate(@<div class="panel-body">    
            <div id="Ajax_Employee_Employee"></div>
        </div>);
        data.Add().ID("TabSheet_Employee_EmployeeTerritory").Text(EmployeeTerritoryResources.EntityPlural).ContentTemplate(@<div class="panel-body">    
            <div id="Ajax_Employee_EmployeeTerritory"></div>
        </div>);
        data.Add().ID("TabSheet_Employee_Order").Text(OrderResources.EntityPlural).ContentTemplate(@<div class="panel-body">    
            <div id="Ajax_Employee_Order"></div>
        </div>);
    })
    .Render();
}

<script>
    // Validate hidden fields
    $.validator.setDefaults({ ignore: null });
    // Parse validators
    $.validator.unobtrusive.parse($("#Ajax"));

    $(function () {
        try {
            var model = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)); }();
            var employeeDictionary = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(DataHelper.GetDataDictionaryAttribute(typeof(Employee)))); }();
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();
            
            var ajaxUrl = "";
            // Employee
            ajaxUrl = "@(Html.Raw(Url.Action("Search", "Employee", new { MasterUrl = Context.Request.Url.AbsoluteUri, MasterControllerAction = Model.ControllerAction, MasterReportsTo = Model.Employee.EmployeeId })))";
            $("#Ajax_Employee_Employee").load(ajaxUrl);
            // EmployeeTerritory
            ajaxUrl = "@(Html.Raw(Url.Action("Search", "EmployeeTerritory", new { MasterUrl = Context.Request.Url.AbsoluteUri, MasterControllerAction = Model.ControllerAction, MasterEmployeeId = Model.Employee.EmployeeId })))";
            $("#Ajax_Employee_EmployeeTerritory").load(ajaxUrl);
            // Order
            ajaxUrl = "@(Html.Raw(Url.Action("Search", "Order", new { MasterUrl = Context.Request.Url.AbsoluteUri, MasterControllerAction = Model.ControllerAction, MasterEmployeeId = Model.Employee.EmployeeId })))";
            $("#Ajax_Employee_Order").load(ajaxUrl);
            ej.widget.init($("#Ajax"));
            $(document).prop("title", "@(ViewBag.Title)");            
    
            var readonly = (controllerAction == "delete" || controllerAction == "read");
            $("input.form-control").not(":input[type=button], :input[type=image], :input[type=reset], :input[type=submit]").attr("readonly", readonly);
            if (readonly) {
                $("img.z-buttonLookup").hide();
            }
            else {
                $("img.z-buttonLookup").show();
            }

            $("input[name$='_Lookup']").attr("readonly", true);

            if (employeeDictionary.IsIdentity) {            
                $("#Group_Employee_EmployeeId").hide();
            }

            // Associations (FK)
            // Employee
            if (model.MasterEmployeeId != null) {
                $("#Employee_ReportsTo").val(model.MasterEmployeeId);
                $("#Group_Employee_ReportsTo").hide();            
            }

            // Collections (PK)
            var display = controllerAction == "create" ? "none" : "block";
            // Employee
            var gridEmployee = $("#Grid_Employee");
            gridEmployee.css("display", display);
            // EmployeeTerritory
            var gridEmployeeTerritory = $("#Grid_EmployeeTerritory");
            gridEmployeeTerritory.css("display", display);
            // Order
            var gridOrder = $("#Grid_Order");
            gridOrder.css("display", display);
        } catch (exception) {
            alert(zExceptionMessage("_EmployeeItem.cshtml", "function()", exception));
        }
    });

    function itemActive_Tab_Employee(args) { // IE
        try {
            switch(args.activeIndex) {
            // Employee
                case 1:
                    $("#Grid_Employee").ejGrid({
                        allowScrolling: true,
                        scrollSettings: { width: "100%" }
                    });
                    break;
            // EmployeeTerritory
                case 2:
                    $("#Grid_EmployeeTerritory").ejGrid({
                        allowScrolling: true,
                        scrollSettings: { width: "100%" }
                    });
                    break;
            // Order
                case 3:
                    $("#Grid_Order").ejGrid({
                        allowScrolling: true,
                        scrollSettings: { width: "100%" }
                    });
                    break;
            }            
        } catch (exception) {
            alert(zExceptionMessage("_EmployeeItem.cshtml", "itemActive_Tab_Employee(args)", exception));
        }
    }    
</script>
